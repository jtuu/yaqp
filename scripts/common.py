import os
import re
import datetime

replace_pat = re.compile(r"(\W)")
def transform_name(name, prefix=None):
    ret = re.sub(replace_pat, "_", name.upper())
    if prefix is not None:
        ret = prefix + ret
    return ret

def add_comment(filename, contents):
    comment = "// Generated by script (%s) on %s\n" % (filename, datetime.datetime.now())
    comment += "// Please don't edit this file by hand\n\n"
    return comment + contents

def add_src_header(h_path, contents):
    return "#include \"%s\"\n\n" % (os.path.basename(h_path)) + contents

def wrap_guard(filename, guard_name, contents):
    guard = "#ifndef %s\n" % (guard_name)
    guard += "#define %s\n\n" % (guard_name)
    output = guard + contents
    output += "#endif\n"
    output = add_comment(filename, output)
    return output

def make_file_paths(orig):
    (out_path, _ext) = os.path.splitext(orig)
    h_path = out_path + ".h"
    c_path = out_path + ".c"
    return (h_path, c_path)

def make_enum(enum_name, names, prefix=None):
    output = "typedef enum {\n"
    for name in names[0:-1]:
        output += "    %s,\n" % (transform_name(name, prefix))
    last_name = names[-1]
    output += "    %s\n" % (transform_name(last_name, prefix))
    output += "} %s;\n\n" % (enum_name)
    return output

def make_name_map_declaration(num_def_name, var_name, names):
    num_names = len(names)
    output = "#define %s %d\n" % (num_def_name, num_names)
    output += "const char * const %s[%s];\n\n" % (var_name, num_def_name)
    return output

def make_name_map_definition(num_def_name, var_name, names, prefix=None):
    output = "const char * const %s[%s] = {\n" % (var_name, num_def_name)
    for name in names[0:-1]:
        output += "    [%s] = \"%s\",\n" % (transform_name(name, prefix), name)
    last_name = names[-1]
    output += "    [%s] = \"%s\"\n" % (transform_name(last_name, prefix), last_name)
    output += "};\n\n"
    return output
